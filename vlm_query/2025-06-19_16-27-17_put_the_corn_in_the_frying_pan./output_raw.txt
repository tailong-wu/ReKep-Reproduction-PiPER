```python

# Explanation:
# The task "Put the corn in the frying pan" involves two stages:
# 1. Grasp the corn.
# 2. Place the corn into the frying pan.

num_stages = 2

### stage 1 sub-goal constraints
def stage1_subgoal_constraint1(end_effector, keypoints):
    """Ensure the end-effector is aligned with the corn (keypoint 3)."""
    keypoint_corn = keypoints[3]  # Keypoint associated with the corn
    cost = np.linalg.norm(end_effector - keypoint_corn)
    return cost

### stage 1 path constraints
# No path constraints for the grasping stage.

### stage 2 sub-goal constraints
def stage2_subgoal_constraint1(end_effector, keypoints):
    """Ensure the corn (keypoint 3) is placed at the center of the frying pan (keypoint 4)."""
    keypoint_corn = keypoints[3]  # Keypoint associated with the corn
    keypoint_pan = keypoints[4]  # Keypoint associated with the frying pan
    cost = np.linalg.norm(keypoint_corn - keypoint_pan)
    return cost

### stage 2 path constraints
def stage2_path_constraint1(end_effector, keypoints):
    """Ensure the robot is still grasping the corn (keypoint 3) throughout this stage."""
    return get_grasping_cost_by_keypoint_idx(3)

"""
Summarize keypoints to be grasped in all grasping stages.
The length of the list should be equal to the number of stages.
For grasping stage, write the keypoint index. For non-grasping stage, write -1.
"""
grasp_keypoints = [3, -1]

"""
Summarize at **the end of which stage** the robot should release the keypoints.
The keypoint indices must appear in an earlier stage as defined in `grasp_keypoints` (i.e., a keypoint can only be released only if it has been grasped previously).
Only release object when it's necessary to complete the task, e.g., drop bouquet in the vase.
The length of the list should be equal to the number of stages.
If a keypoint is to be released at the end of a stage, write the keypoint index at the corresponding location. Otherwise, write -1.
"""
release_keypoints = [-1, 3]

```